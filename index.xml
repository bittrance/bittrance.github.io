<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bittrance blog</title><link>https://bittrance.github.io/</link><description>Recent content on Bittrance blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 13 Apr 2025 13:47:00 +0200</lastBuildDate><atom:link href="https://bittrance.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Zero downtime shutdown for REST APIs</title><link>https://bittrance.github.io/posts/graceful-shutdown-for-rest-apis/</link><pubDate>Sun, 13 Apr 2025 13:47:00 +0200</pubDate><guid>https://bittrance.github.io/posts/graceful-shutdown-for-rest-apis/</guid><description>How to ensure that your Kubernetes deployment rolling restart lose zero requests.</description></item><item><title>In-house cloud developer coaching for IT staff</title><link>https://bittrance.github.io/posts/inhouse-devops-coaching/</link><pubDate>Sun, 26 May 2024 12:32:00 +0200</pubDate><guid>https://bittrance.github.io/posts/inhouse-devops-coaching/</guid><description>&lt;p>My current role is as a developer at a cloud solution provider. The company mostly works with cloud infrastructure and cloud services consultancy. Our main expertise is on virtual machines, networking and related security, but like most IT staff, my colleagues also know a bit of programming and serverless. Many share an ambition to automate and standardize the services they provide, but without experience in development methodology, they struggle to get beyond the point where they are copying scripts around.&lt;/p></description></item><item><title>Designing RESTful APIs for cloud services</title><link>https://bittrance.github.io/posts/designing-restful-apis-for-cloud-services/</link><pubDate>Fri, 08 Apr 2022 13:49:00 +0200</pubDate><guid>https://bittrance.github.io/posts/designing-restful-apis-for-cloud-services/</guid><description>Much has been written about basic REST API design, but most guides stop short of providing higher-level recommendations. This post proposes and motivates a set of guidelines for RESTful APIs (and by extension their contracts) intended to maximize their life span and support rapid evolution throughout it.</description></item><item><title>Twelve-factor app anno 2022</title><link>https://bittrance.github.io/posts/12-factor-app-anno-2022/</link><pubDate>Wed, 23 Feb 2022 15:11:00 +0200</pubDate><guid>https://bittrance.github.io/posts/12-factor-app-anno-2022/</guid><description>The Twelve-factor app methodology turns 10. This blog posts re-evaluates the original factors against a decade of experience with software-as-a-service development and the maturing of serverless development.</description></item><item><title>VPN-less access to Azure Private vnet</title><link>https://bittrance.github.io/posts/vpnless-access-to-azure-private-vnet/</link><pubDate>Wed, 29 Sep 2021 13:49:00 +0200</pubDate><guid>https://bittrance.github.io/posts/vpnless-access-to-azure-private-vnet/</guid><description>A simple method to get access to private networks on private clouds.</description></item><item><title>Extending Our Tekton Pipeline</title><link>https://bittrance.github.io/posts/extending-our-tekton-pipeline/</link><pubDate>Tue, 04 May 2021 14:31:00 +0200</pubDate><guid>https://bittrance.github.io/posts/extending-our-tekton-pipeline/</guid><description>This blog post continues my exploration of Tekton. In the first blog post we created a simple pipeline that ran our frontend tests. In this blog post we will show how to set up pods to support our tests. This also serves as a sketch of how to interact with Kubernetes in general.</description></item><item><title>Creating a simple build pipeline with Tekton</title><link>https://bittrance.github.io/posts/simple-pipeline-with-tekton/</link><pubDate>Mon, 19 Apr 2021 21:48:09 +0200</pubDate><guid>https://bittrance.github.io/posts/simple-pipeline-with-tekton/</guid><description>Tekton is a continuous integration and delivery platform on top of Kubernetes. This blog post will
explore Tekton&amp;rsquo;s feature set by way of converting a GitHub Actions workflow into a Tekton Pipeline</description></item><item><title>Local testing Kubernetes cluster with Kind</title><link>https://bittrance.github.io/posts/install-kind/</link><pubDate>Sat, 17 Apr 2021 07:59:00 +0200</pubDate><guid>https://bittrance.github.io/posts/install-kind/</guid><description>&lt;p>Should you not already have a nice cluster to test on, you can spin up a local Kubernetes cluster using Kind. Kind uses Docker containers to represent nodes. Unlike minikube, this one boots up in less than a minute and can easily be extended with additional pretend nodes, making it superior for working with distributed applications.&lt;/p>
&lt;p>There are several ways to install kind. If you are a Go developer, the easiest way may be to&lt;/p></description></item><item><title>Truncating a Kafka topic</title><link>https://bittrance.github.io/posts/kafka-purge-topic/</link><pubDate>Fri, 02 Apr 2021 20:43:28 +0200</pubDate><guid>https://bittrance.github.io/posts/kafka-purge-topic/</guid><description>&lt;p>Sometimes, you want to get rid of messages from a Kafka topic. Perhaps you have consumers that always start from the beginning, or you realize the whole topic is full of messages with sensitive data that must not reach consumers.&lt;/p>
&lt;p>In theory, you can easily delete a Kafka topic. However, this is quite disruptive and is likely to fail both producers and consumers on this topic even if you quickly recreate the topic. There is no telling what consumer groups tracking their own offsets or having custom rebalancing logic might do.&lt;/p></description></item></channel></rss>